/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: disperser.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./common";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace disperser {
    export enum BlobStatus {
        UNKNOWN = 0,
        PROCESSING = 1,
        CONFIRMED = 2,
        FAILED = 3,
        FINALIZED = 4,
        INSUFFICIENT_SIGNATURES = 5,
        DISPERSING = 6
    }
    export class AuthenticatedRequest extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            disperse_request?: DisperseBlobRequest;
            authentication_data?: never;
        } | {
            disperse_request?: never;
            authentication_data?: AuthenticationData;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("disperse_request" in data && data.disperse_request != undefined) {
                    this.disperse_request = data.disperse_request;
                }
                if ("authentication_data" in data && data.authentication_data != undefined) {
                    this.authentication_data = data.authentication_data;
                }
            }
        }
        get disperse_request() {
            return pb_1.Message.getWrapperField(this, DisperseBlobRequest, 1) as DisperseBlobRequest;
        }
        set disperse_request(value: DisperseBlobRequest) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_disperse_request() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get authentication_data() {
            return pb_1.Message.getWrapperField(this, AuthenticationData, 2) as AuthenticationData;
        }
        set authentication_data(value: AuthenticationData) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_authentication_data() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "disperse_request" | "authentication_data";
            } = {
                0: "none",
                1: "disperse_request",
                2: "authentication_data"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            disperse_request?: ReturnType<typeof DisperseBlobRequest.prototype.toObject>;
            authentication_data?: ReturnType<typeof AuthenticationData.prototype.toObject>;
        }): AuthenticatedRequest {
            const message = new AuthenticatedRequest({});
            if (data.disperse_request != null) {
                message.disperse_request = DisperseBlobRequest.fromObject(data.disperse_request);
            }
            if (data.authentication_data != null) {
                message.authentication_data = AuthenticationData.fromObject(data.authentication_data);
            }
            return message;
        }
        toObject() {
            const data: {
                disperse_request?: ReturnType<typeof DisperseBlobRequest.prototype.toObject>;
                authentication_data?: ReturnType<typeof AuthenticationData.prototype.toObject>;
            } = {};
            if (this.disperse_request != null) {
                data.disperse_request = this.disperse_request.toObject();
            }
            if (this.authentication_data != null) {
                data.authentication_data = this.authentication_data.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_disperse_request)
                writer.writeMessage(1, this.disperse_request, () => this.disperse_request.serialize(writer));
            if (this.has_authentication_data)
                writer.writeMessage(2, this.authentication_data, () => this.authentication_data.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticatedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticatedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.disperse_request, () => message.disperse_request = DisperseBlobRequest.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.authentication_data, () => message.authentication_data = AuthenticationData.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticatedRequest {
            return AuthenticatedRequest.deserialize(bytes);
        }
    }
    export class AuthenticatedReply extends pb_1.Message {
        #one_of_decls: number[][] = [[1, 2]];
        constructor(data?: any[] | ({} & (({
            blob_auth_header?: BlobAuthHeader;
            disperse_reply?: never;
        } | {
            blob_auth_header?: never;
            disperse_reply?: DisperseBlobReply;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blob_auth_header" in data && data.blob_auth_header != undefined) {
                    this.blob_auth_header = data.blob_auth_header;
                }
                if ("disperse_reply" in data && data.disperse_reply != undefined) {
                    this.disperse_reply = data.disperse_reply;
                }
            }
        }
        get blob_auth_header() {
            return pb_1.Message.getWrapperField(this, BlobAuthHeader, 1) as BlobAuthHeader;
        }
        set blob_auth_header(value: BlobAuthHeader) {
            pb_1.Message.setOneofWrapperField(this, 1, this.#one_of_decls[0], value);
        }
        get has_blob_auth_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get disperse_reply() {
            return pb_1.Message.getWrapperField(this, DisperseBlobReply, 2) as DisperseBlobReply;
        }
        set disperse_reply(value: DisperseBlobReply) {
            pb_1.Message.setOneofWrapperField(this, 2, this.#one_of_decls[0], value);
        }
        get has_disperse_reply() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get payload() {
            const cases: {
                [index: number]: "none" | "blob_auth_header" | "disperse_reply";
            } = {
                0: "none",
                1: "blob_auth_header",
                2: "disperse_reply"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
        }
        static fromObject(data: {
            blob_auth_header?: ReturnType<typeof BlobAuthHeader.prototype.toObject>;
            disperse_reply?: ReturnType<typeof DisperseBlobReply.prototype.toObject>;
        }): AuthenticatedReply {
            const message = new AuthenticatedReply({});
            if (data.blob_auth_header != null) {
                message.blob_auth_header = BlobAuthHeader.fromObject(data.blob_auth_header);
            }
            if (data.disperse_reply != null) {
                message.disperse_reply = DisperseBlobReply.fromObject(data.disperse_reply);
            }
            return message;
        }
        toObject() {
            const data: {
                blob_auth_header?: ReturnType<typeof BlobAuthHeader.prototype.toObject>;
                disperse_reply?: ReturnType<typeof DisperseBlobReply.prototype.toObject>;
            } = {};
            if (this.blob_auth_header != null) {
                data.blob_auth_header = this.blob_auth_header.toObject();
            }
            if (this.disperse_reply != null) {
                data.disperse_reply = this.disperse_reply.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_blob_auth_header)
                writer.writeMessage(1, this.blob_auth_header, () => this.blob_auth_header.serialize(writer));
            if (this.has_disperse_reply)
                writer.writeMessage(2, this.disperse_reply, () => this.disperse_reply.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticatedReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticatedReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.blob_auth_header, () => message.blob_auth_header = BlobAuthHeader.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.disperse_reply, () => message.disperse_reply = DisperseBlobReply.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticatedReply {
            return AuthenticatedReply.deserialize(bytes);
        }
    }
    export class BlobAuthHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            challenge_parameter?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("challenge_parameter" in data && data.challenge_parameter != undefined) {
                    this.challenge_parameter = data.challenge_parameter;
                }
            }
        }
        get challenge_parameter() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set challenge_parameter(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            challenge_parameter?: number;
        }): BlobAuthHeader {
            const message = new BlobAuthHeader({});
            if (data.challenge_parameter != null) {
                message.challenge_parameter = data.challenge_parameter;
            }
            return message;
        }
        toObject() {
            const data: {
                challenge_parameter?: number;
            } = {};
            if (this.challenge_parameter != null) {
                data.challenge_parameter = this.challenge_parameter;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.challenge_parameter != 0)
                writer.writeUint32(1, this.challenge_parameter);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlobAuthHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlobAuthHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.challenge_parameter = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlobAuthHeader {
            return BlobAuthHeader.deserialize(bytes);
        }
    }
    export class AuthenticationData extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            authentication_data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("authentication_data" in data && data.authentication_data != undefined) {
                    this.authentication_data = data.authentication_data;
                }
            }
        }
        get authentication_data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set authentication_data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            authentication_data?: Uint8Array;
        }): AuthenticationData {
            const message = new AuthenticationData({});
            if (data.authentication_data != null) {
                message.authentication_data = data.authentication_data;
            }
            return message;
        }
        toObject() {
            const data: {
                authentication_data?: Uint8Array;
            } = {};
            if (this.authentication_data != null) {
                data.authentication_data = this.authentication_data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.authentication_data.length)
                writer.writeBytes(1, this.authentication_data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AuthenticationData {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AuthenticationData();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.authentication_data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AuthenticationData {
            return AuthenticationData.deserialize(bytes);
        }
    }
    export class DisperseBlobRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
            custom_quorum_numbers?: number[];
            account_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("custom_quorum_numbers" in data && data.custom_quorum_numbers != undefined) {
                    this.custom_quorum_numbers = data.custom_quorum_numbers;
                }
                if ("account_id" in data && data.account_id != undefined) {
                    this.account_id = data.account_id;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get custom_quorum_numbers() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set custom_quorum_numbers(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get account_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set account_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
            custom_quorum_numbers?: number[];
            account_id?: string;
        }): DisperseBlobRequest {
            const message = new DisperseBlobRequest({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.custom_quorum_numbers != null) {
                message.custom_quorum_numbers = data.custom_quorum_numbers;
            }
            if (data.account_id != null) {
                message.account_id = data.account_id;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
                custom_quorum_numbers?: number[];
                account_id?: string;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.custom_quorum_numbers != null) {
                data.custom_quorum_numbers = this.custom_quorum_numbers;
            }
            if (this.account_id != null) {
                data.account_id = this.account_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (this.custom_quorum_numbers.length)
                writer.writePackedUint32(2, this.custom_quorum_numbers);
            if (this.account_id.length)
                writer.writeString(3, this.account_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisperseBlobRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisperseBlobRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    case 2:
                        message.custom_quorum_numbers = reader.readPackedUint32();
                        break;
                    case 3:
                        message.account_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisperseBlobRequest {
            return DisperseBlobRequest.deserialize(bytes);
        }
    }
    export class DisperseBlobReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            result?: BlobStatus;
            request_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("result" in data && data.result != undefined) {
                    this.result = data.result;
                }
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
            }
        }
        get result() {
            return pb_1.Message.getFieldWithDefault(this, 1, BlobStatus.UNKNOWN) as BlobStatus;
        }
        set result(value: BlobStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set request_id(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            result?: BlobStatus;
            request_id?: Uint8Array;
        }): DisperseBlobReply {
            const message = new DisperseBlobReply({});
            if (data.result != null) {
                message.result = data.result;
            }
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            return message;
        }
        toObject() {
            const data: {
                result?: BlobStatus;
                request_id?: Uint8Array;
            } = {};
            if (this.result != null) {
                data.result = this.result;
            }
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.result != BlobStatus.UNKNOWN)
                writer.writeEnum(1, this.result);
            if (this.request_id.length)
                writer.writeBytes(2, this.request_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DisperseBlobReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DisperseBlobReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.result = reader.readEnum();
                        break;
                    case 2:
                        message.request_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DisperseBlobReply {
            return DisperseBlobReply.deserialize(bytes);
        }
    }
    export class BlobStatusRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            request_id?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("request_id" in data && data.request_id != undefined) {
                    this.request_id = data.request_id;
                }
            }
        }
        get request_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set request_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            request_id?: Uint8Array;
        }): BlobStatusRequest {
            const message = new BlobStatusRequest({});
            if (data.request_id != null) {
                message.request_id = data.request_id;
            }
            return message;
        }
        toObject() {
            const data: {
                request_id?: Uint8Array;
            } = {};
            if (this.request_id != null) {
                data.request_id = this.request_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.request_id.length)
                writer.writeBytes(1, this.request_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlobStatusRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlobStatusRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.request_id = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlobStatusRequest {
            return BlobStatusRequest.deserialize(bytes);
        }
    }
    export class BlobStatusReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            status?: BlobStatus;
            info?: BlobInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("status" in data && data.status != undefined) {
                    this.status = data.status;
                }
                if ("info" in data && data.info != undefined) {
                    this.info = data.info;
                }
            }
        }
        get status() {
            return pb_1.Message.getFieldWithDefault(this, 1, BlobStatus.UNKNOWN) as BlobStatus;
        }
        set status(value: BlobStatus) {
            pb_1.Message.setField(this, 1, value);
        }
        get info() {
            return pb_1.Message.getWrapperField(this, BlobInfo, 2) as BlobInfo;
        }
        set info(value: BlobInfo) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_info() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            status?: BlobStatus;
            info?: ReturnType<typeof BlobInfo.prototype.toObject>;
        }): BlobStatusReply {
            const message = new BlobStatusReply({});
            if (data.status != null) {
                message.status = data.status;
            }
            if (data.info != null) {
                message.info = BlobInfo.fromObject(data.info);
            }
            return message;
        }
        toObject() {
            const data: {
                status?: BlobStatus;
                info?: ReturnType<typeof BlobInfo.prototype.toObject>;
            } = {};
            if (this.status != null) {
                data.status = this.status;
            }
            if (this.info != null) {
                data.info = this.info.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.status != BlobStatus.UNKNOWN)
                writer.writeEnum(1, this.status);
            if (this.has_info)
                writer.writeMessage(2, this.info, () => this.info.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlobStatusReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlobStatusReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.status = reader.readEnum();
                        break;
                    case 2:
                        reader.readMessage(message.info, () => message.info = BlobInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlobStatusReply {
            return BlobStatusReply.deserialize(bytes);
        }
    }
    export class RetrieveBlobRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_header_hash?: Uint8Array;
            blob_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_header_hash" in data && data.batch_header_hash != undefined) {
                    this.batch_header_hash = data.batch_header_hash;
                }
                if ("blob_index" in data && data.blob_index != undefined) {
                    this.blob_index = data.blob_index;
                }
            }
        }
        get batch_header_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set batch_header_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get blob_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set blob_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            batch_header_hash?: Uint8Array;
            blob_index?: number;
        }): RetrieveBlobRequest {
            const message = new RetrieveBlobRequest({});
            if (data.batch_header_hash != null) {
                message.batch_header_hash = data.batch_header_hash;
            }
            if (data.blob_index != null) {
                message.blob_index = data.blob_index;
            }
            return message;
        }
        toObject() {
            const data: {
                batch_header_hash?: Uint8Array;
                blob_index?: number;
            } = {};
            if (this.batch_header_hash != null) {
                data.batch_header_hash = this.batch_header_hash;
            }
            if (this.blob_index != null) {
                data.blob_index = this.blob_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_header_hash.length)
                writer.writeBytes(1, this.batch_header_hash);
            if (this.blob_index != 0)
                writer.writeUint32(2, this.blob_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RetrieveBlobRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RetrieveBlobRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batch_header_hash = reader.readBytes();
                        break;
                    case 2:
                        message.blob_index = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RetrieveBlobRequest {
            return RetrieveBlobRequest.deserialize(bytes);
        }
    }
    export class RetrieveBlobReply extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): RetrieveBlobReply {
            const message = new RetrieveBlobReply({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RetrieveBlobReply {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RetrieveBlobReply();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): RetrieveBlobReply {
            return RetrieveBlobReply.deserialize(bytes);
        }
    }
    export class BlobInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            blob_header?: BlobHeader;
            blob_verification_proof?: BlobVerificationProof;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("blob_header" in data && data.blob_header != undefined) {
                    this.blob_header = data.blob_header;
                }
                if ("blob_verification_proof" in data && data.blob_verification_proof != undefined) {
                    this.blob_verification_proof = data.blob_verification_proof;
                }
            }
        }
        get blob_header() {
            return pb_1.Message.getWrapperField(this, BlobHeader, 1) as BlobHeader;
        }
        set blob_header(value: BlobHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_blob_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get blob_verification_proof() {
            return pb_1.Message.getWrapperField(this, BlobVerificationProof, 2) as BlobVerificationProof;
        }
        set blob_verification_proof(value: BlobVerificationProof) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_blob_verification_proof() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            blob_header?: ReturnType<typeof BlobHeader.prototype.toObject>;
            blob_verification_proof?: ReturnType<typeof BlobVerificationProof.prototype.toObject>;
        }): BlobInfo {
            const message = new BlobInfo({});
            if (data.blob_header != null) {
                message.blob_header = BlobHeader.fromObject(data.blob_header);
            }
            if (data.blob_verification_proof != null) {
                message.blob_verification_proof = BlobVerificationProof.fromObject(data.blob_verification_proof);
            }
            return message;
        }
        toObject() {
            const data: {
                blob_header?: ReturnType<typeof BlobHeader.prototype.toObject>;
                blob_verification_proof?: ReturnType<typeof BlobVerificationProof.prototype.toObject>;
            } = {};
            if (this.blob_header != null) {
                data.blob_header = this.blob_header.toObject();
            }
            if (this.blob_verification_proof != null) {
                data.blob_verification_proof = this.blob_verification_proof.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_blob_header)
                writer.writeMessage(1, this.blob_header, () => this.blob_header.serialize(writer));
            if (this.has_blob_verification_proof)
                writer.writeMessage(2, this.blob_verification_proof, () => this.blob_verification_proof.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlobInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlobInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.blob_header, () => message.blob_header = BlobHeader.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.blob_verification_proof, () => message.blob_verification_proof = BlobVerificationProof.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlobInfo {
            return BlobInfo.deserialize(bytes);
        }
    }
    export class BlobHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            commitment?: dependency_1.common.G1Commitment;
            data_length?: number;
            blob_quorum_params?: BlobQuorumParam[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("commitment" in data && data.commitment != undefined) {
                    this.commitment = data.commitment;
                }
                if ("data_length" in data && data.data_length != undefined) {
                    this.data_length = data.data_length;
                }
                if ("blob_quorum_params" in data && data.blob_quorum_params != undefined) {
                    this.blob_quorum_params = data.blob_quorum_params;
                }
            }
        }
        get commitment() {
            return pb_1.Message.getWrapperField(this, dependency_1.common.G1Commitment, 1) as dependency_1.common.G1Commitment;
        }
        set commitment(value: dependency_1.common.G1Commitment) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_commitment() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get data_length() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set data_length(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get blob_quorum_params() {
            return pb_1.Message.getRepeatedWrapperField(this, BlobQuorumParam, 3) as BlobQuorumParam[];
        }
        set blob_quorum_params(value: BlobQuorumParam[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            commitment?: ReturnType<typeof dependency_1.common.G1Commitment.prototype.toObject>;
            data_length?: number;
            blob_quorum_params?: ReturnType<typeof BlobQuorumParam.prototype.toObject>[];
        }): BlobHeader {
            const message = new BlobHeader({});
            if (data.commitment != null) {
                message.commitment = dependency_1.common.G1Commitment.fromObject(data.commitment);
            }
            if (data.data_length != null) {
                message.data_length = data.data_length;
            }
            if (data.blob_quorum_params != null) {
                message.blob_quorum_params = data.blob_quorum_params.map(item => BlobQuorumParam.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                commitment?: ReturnType<typeof dependency_1.common.G1Commitment.prototype.toObject>;
                data_length?: number;
                blob_quorum_params?: ReturnType<typeof BlobQuorumParam.prototype.toObject>[];
            } = {};
            if (this.commitment != null) {
                data.commitment = this.commitment.toObject();
            }
            if (this.data_length != null) {
                data.data_length = this.data_length;
            }
            if (this.blob_quorum_params != null) {
                data.blob_quorum_params = this.blob_quorum_params.map((item: BlobQuorumParam) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_commitment)
                writer.writeMessage(1, this.commitment, () => this.commitment.serialize(writer));
            if (this.data_length != 0)
                writer.writeUint32(2, this.data_length);
            if (this.blob_quorum_params.length)
                writer.writeRepeatedMessage(3, this.blob_quorum_params, (item: BlobQuorumParam) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlobHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlobHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.commitment, () => message.commitment = dependency_1.common.G1Commitment.deserialize(reader));
                        break;
                    case 2:
                        message.data_length = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.blob_quorum_params, () => pb_1.Message.addToRepeatedWrapperField(message, 3, BlobQuorumParam.deserialize(reader), BlobQuorumParam));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlobHeader {
            return BlobHeader.deserialize(bytes);
        }
    }
    export class BlobQuorumParam extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            quorum_number?: number;
            adversary_threshold_percentage?: number;
            confirmation_threshold_percentage?: number;
            chunk_length?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("quorum_number" in data && data.quorum_number != undefined) {
                    this.quorum_number = data.quorum_number;
                }
                if ("adversary_threshold_percentage" in data && data.adversary_threshold_percentage != undefined) {
                    this.adversary_threshold_percentage = data.adversary_threshold_percentage;
                }
                if ("confirmation_threshold_percentage" in data && data.confirmation_threshold_percentage != undefined) {
                    this.confirmation_threshold_percentage = data.confirmation_threshold_percentage;
                }
                if ("chunk_length" in data && data.chunk_length != undefined) {
                    this.chunk_length = data.chunk_length;
                }
            }
        }
        get quorum_number() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set quorum_number(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get adversary_threshold_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set adversary_threshold_percentage(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get confirmation_threshold_percentage() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set confirmation_threshold_percentage(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get chunk_length() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set chunk_length(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            quorum_number?: number;
            adversary_threshold_percentage?: number;
            confirmation_threshold_percentage?: number;
            chunk_length?: number;
        }): BlobQuorumParam {
            const message = new BlobQuorumParam({});
            if (data.quorum_number != null) {
                message.quorum_number = data.quorum_number;
            }
            if (data.adversary_threshold_percentage != null) {
                message.adversary_threshold_percentage = data.adversary_threshold_percentage;
            }
            if (data.confirmation_threshold_percentage != null) {
                message.confirmation_threshold_percentage = data.confirmation_threshold_percentage;
            }
            if (data.chunk_length != null) {
                message.chunk_length = data.chunk_length;
            }
            return message;
        }
        toObject() {
            const data: {
                quorum_number?: number;
                adversary_threshold_percentage?: number;
                confirmation_threshold_percentage?: number;
                chunk_length?: number;
            } = {};
            if (this.quorum_number != null) {
                data.quorum_number = this.quorum_number;
            }
            if (this.adversary_threshold_percentage != null) {
                data.adversary_threshold_percentage = this.adversary_threshold_percentage;
            }
            if (this.confirmation_threshold_percentage != null) {
                data.confirmation_threshold_percentage = this.confirmation_threshold_percentage;
            }
            if (this.chunk_length != null) {
                data.chunk_length = this.chunk_length;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.quorum_number != 0)
                writer.writeUint32(1, this.quorum_number);
            if (this.adversary_threshold_percentage != 0)
                writer.writeUint32(2, this.adversary_threshold_percentage);
            if (this.confirmation_threshold_percentage != 0)
                writer.writeUint32(3, this.confirmation_threshold_percentage);
            if (this.chunk_length != 0)
                writer.writeUint32(4, this.chunk_length);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlobQuorumParam {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlobQuorumParam();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.quorum_number = reader.readUint32();
                        break;
                    case 2:
                        message.adversary_threshold_percentage = reader.readUint32();
                        break;
                    case 3:
                        message.confirmation_threshold_percentage = reader.readUint32();
                        break;
                    case 4:
                        message.chunk_length = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlobQuorumParam {
            return BlobQuorumParam.deserialize(bytes);
        }
    }
    export class BlobVerificationProof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_id?: number;
            blob_index?: number;
            batch_metadata?: BatchMetadata;
            inclusion_proof?: Uint8Array;
            quorum_indexes?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_id" in data && data.batch_id != undefined) {
                    this.batch_id = data.batch_id;
                }
                if ("blob_index" in data && data.blob_index != undefined) {
                    this.blob_index = data.blob_index;
                }
                if ("batch_metadata" in data && data.batch_metadata != undefined) {
                    this.batch_metadata = data.batch_metadata;
                }
                if ("inclusion_proof" in data && data.inclusion_proof != undefined) {
                    this.inclusion_proof = data.inclusion_proof;
                }
                if ("quorum_indexes" in data && data.quorum_indexes != undefined) {
                    this.quorum_indexes = data.quorum_indexes;
                }
            }
        }
        get batch_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set batch_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get blob_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set blob_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get batch_metadata() {
            return pb_1.Message.getWrapperField(this, BatchMetadata, 3) as BatchMetadata;
        }
        set batch_metadata(value: BatchMetadata) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_batch_metadata() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get inclusion_proof() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array(0)) as Uint8Array;
        }
        set inclusion_proof(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        get quorum_indexes() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set quorum_indexes(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            batch_id?: number;
            blob_index?: number;
            batch_metadata?: ReturnType<typeof BatchMetadata.prototype.toObject>;
            inclusion_proof?: Uint8Array;
            quorum_indexes?: Uint8Array;
        }): BlobVerificationProof {
            const message = new BlobVerificationProof({});
            if (data.batch_id != null) {
                message.batch_id = data.batch_id;
            }
            if (data.blob_index != null) {
                message.blob_index = data.blob_index;
            }
            if (data.batch_metadata != null) {
                message.batch_metadata = BatchMetadata.fromObject(data.batch_metadata);
            }
            if (data.inclusion_proof != null) {
                message.inclusion_proof = data.inclusion_proof;
            }
            if (data.quorum_indexes != null) {
                message.quorum_indexes = data.quorum_indexes;
            }
            return message;
        }
        toObject() {
            const data: {
                batch_id?: number;
                blob_index?: number;
                batch_metadata?: ReturnType<typeof BatchMetadata.prototype.toObject>;
                inclusion_proof?: Uint8Array;
                quorum_indexes?: Uint8Array;
            } = {};
            if (this.batch_id != null) {
                data.batch_id = this.batch_id;
            }
            if (this.blob_index != null) {
                data.blob_index = this.blob_index;
            }
            if (this.batch_metadata != null) {
                data.batch_metadata = this.batch_metadata.toObject();
            }
            if (this.inclusion_proof != null) {
                data.inclusion_proof = this.inclusion_proof;
            }
            if (this.quorum_indexes != null) {
                data.quorum_indexes = this.quorum_indexes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_id != 0)
                writer.writeUint32(1, this.batch_id);
            if (this.blob_index != 0)
                writer.writeUint32(2, this.blob_index);
            if (this.has_batch_metadata)
                writer.writeMessage(3, this.batch_metadata, () => this.batch_metadata.serialize(writer));
            if (this.inclusion_proof.length)
                writer.writeBytes(4, this.inclusion_proof);
            if (this.quorum_indexes.length)
                writer.writeBytes(5, this.quorum_indexes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlobVerificationProof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlobVerificationProof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batch_id = reader.readUint32();
                        break;
                    case 2:
                        message.blob_index = reader.readUint32();
                        break;
                    case 3:
                        reader.readMessage(message.batch_metadata, () => message.batch_metadata = BatchMetadata.deserialize(reader));
                        break;
                    case 4:
                        message.inclusion_proof = reader.readBytes();
                        break;
                    case 5:
                        message.quorum_indexes = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BlobVerificationProof {
            return BlobVerificationProof.deserialize(bytes);
        }
    }
    export class BatchMetadata extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_header?: BatchHeader;
            signatory_record_hash?: Uint8Array;
            fee?: Uint8Array;
            confirmation_block_number?: number;
            batch_header_hash?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_header" in data && data.batch_header != undefined) {
                    this.batch_header = data.batch_header;
                }
                if ("signatory_record_hash" in data && data.signatory_record_hash != undefined) {
                    this.signatory_record_hash = data.signatory_record_hash;
                }
                if ("fee" in data && data.fee != undefined) {
                    this.fee = data.fee;
                }
                if ("confirmation_block_number" in data && data.confirmation_block_number != undefined) {
                    this.confirmation_block_number = data.confirmation_block_number;
                }
                if ("batch_header_hash" in data && data.batch_header_hash != undefined) {
                    this.batch_header_hash = data.batch_header_hash;
                }
            }
        }
        get batch_header() {
            return pb_1.Message.getWrapperField(this, BatchHeader, 1) as BatchHeader;
        }
        set batch_header(value: BatchHeader) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch_header() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get signatory_record_hash() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set signatory_record_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get fee() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set fee(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get confirmation_block_number() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set confirmation_block_number(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get batch_header_hash() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array(0)) as Uint8Array;
        }
        set batch_header_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            batch_header?: ReturnType<typeof BatchHeader.prototype.toObject>;
            signatory_record_hash?: Uint8Array;
            fee?: Uint8Array;
            confirmation_block_number?: number;
            batch_header_hash?: Uint8Array;
        }): BatchMetadata {
            const message = new BatchMetadata({});
            if (data.batch_header != null) {
                message.batch_header = BatchHeader.fromObject(data.batch_header);
            }
            if (data.signatory_record_hash != null) {
                message.signatory_record_hash = data.signatory_record_hash;
            }
            if (data.fee != null) {
                message.fee = data.fee;
            }
            if (data.confirmation_block_number != null) {
                message.confirmation_block_number = data.confirmation_block_number;
            }
            if (data.batch_header_hash != null) {
                message.batch_header_hash = data.batch_header_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                batch_header?: ReturnType<typeof BatchHeader.prototype.toObject>;
                signatory_record_hash?: Uint8Array;
                fee?: Uint8Array;
                confirmation_block_number?: number;
                batch_header_hash?: Uint8Array;
            } = {};
            if (this.batch_header != null) {
                data.batch_header = this.batch_header.toObject();
            }
            if (this.signatory_record_hash != null) {
                data.signatory_record_hash = this.signatory_record_hash;
            }
            if (this.fee != null) {
                data.fee = this.fee;
            }
            if (this.confirmation_block_number != null) {
                data.confirmation_block_number = this.confirmation_block_number;
            }
            if (this.batch_header_hash != null) {
                data.batch_header_hash = this.batch_header_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch_header)
                writer.writeMessage(1, this.batch_header, () => this.batch_header.serialize(writer));
            if (this.signatory_record_hash.length)
                writer.writeBytes(2, this.signatory_record_hash);
            if (this.fee.length)
                writer.writeBytes(3, this.fee);
            if (this.confirmation_block_number != 0)
                writer.writeUint32(4, this.confirmation_block_number);
            if (this.batch_header_hash.length)
                writer.writeBytes(5, this.batch_header_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchMetadata {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchMetadata();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch_header, () => message.batch_header = BatchHeader.deserialize(reader));
                        break;
                    case 2:
                        message.signatory_record_hash = reader.readBytes();
                        break;
                    case 3:
                        message.fee = reader.readBytes();
                        break;
                    case 4:
                        message.confirmation_block_number = reader.readUint32();
                        break;
                    case 5:
                        message.batch_header_hash = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchMetadata {
            return BatchMetadata.deserialize(bytes);
        }
    }
    export class BatchHeader extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_root?: Uint8Array;
            quorum_numbers?: Uint8Array;
            quorum_signed_percentages?: Uint8Array;
            reference_block_number?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_root" in data && data.batch_root != undefined) {
                    this.batch_root = data.batch_root;
                }
                if ("quorum_numbers" in data && data.quorum_numbers != undefined) {
                    this.quorum_numbers = data.quorum_numbers;
                }
                if ("quorum_signed_percentages" in data && data.quorum_signed_percentages != undefined) {
                    this.quorum_signed_percentages = data.quorum_signed_percentages;
                }
                if ("reference_block_number" in data && data.reference_block_number != undefined) {
                    this.reference_block_number = data.reference_block_number;
                }
            }
        }
        get batch_root() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set batch_root(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get quorum_numbers() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set quorum_numbers(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get quorum_signed_percentages() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array(0)) as Uint8Array;
        }
        set quorum_signed_percentages(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get reference_block_number() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set reference_block_number(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            batch_root?: Uint8Array;
            quorum_numbers?: Uint8Array;
            quorum_signed_percentages?: Uint8Array;
            reference_block_number?: number;
        }): BatchHeader {
            const message = new BatchHeader({});
            if (data.batch_root != null) {
                message.batch_root = data.batch_root;
            }
            if (data.quorum_numbers != null) {
                message.quorum_numbers = data.quorum_numbers;
            }
            if (data.quorum_signed_percentages != null) {
                message.quorum_signed_percentages = data.quorum_signed_percentages;
            }
            if (data.reference_block_number != null) {
                message.reference_block_number = data.reference_block_number;
            }
            return message;
        }
        toObject() {
            const data: {
                batch_root?: Uint8Array;
                quorum_numbers?: Uint8Array;
                quorum_signed_percentages?: Uint8Array;
                reference_block_number?: number;
            } = {};
            if (this.batch_root != null) {
                data.batch_root = this.batch_root;
            }
            if (this.quorum_numbers != null) {
                data.quorum_numbers = this.quorum_numbers;
            }
            if (this.quorum_signed_percentages != null) {
                data.quorum_signed_percentages = this.quorum_signed_percentages;
            }
            if (this.reference_block_number != null) {
                data.reference_block_number = this.reference_block_number;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_root.length)
                writer.writeBytes(1, this.batch_root);
            if (this.quorum_numbers.length)
                writer.writeBytes(2, this.quorum_numbers);
            if (this.quorum_signed_percentages.length)
                writer.writeBytes(3, this.quorum_signed_percentages);
            if (this.reference_block_number != 0)
                writer.writeUint32(4, this.reference_block_number);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BatchHeader {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BatchHeader();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.batch_root = reader.readBytes();
                        break;
                    case 2:
                        message.quorum_numbers = reader.readBytes();
                        break;
                    case 3:
                        message.quorum_signed_percentages = reader.readBytes();
                        break;
                    case 4:
                        message.reference_block_number = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BatchHeader {
            return BatchHeader.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDisperserService {
        static definition = {
            DisperseBlob: {
                path: "/disperser.Disperser/DisperseBlob",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: DisperseBlobRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => DisperseBlobRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DisperseBlobReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DisperseBlobReply.deserialize(new Uint8Array(bytes))
            },
            DisperseBlobAuthenticated: {
                path: "/disperser.Disperser/DisperseBlobAuthenticated",
                requestStream: true,
                responseStream: true,
                requestSerialize: (message: AuthenticatedRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => AuthenticatedRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: AuthenticatedReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => AuthenticatedReply.deserialize(new Uint8Array(bytes))
            },
            GetBlobStatus: {
                path: "/disperser.Disperser/GetBlobStatus",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: BlobStatusRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => BlobStatusRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: BlobStatusReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => BlobStatusReply.deserialize(new Uint8Array(bytes))
            },
            RetrieveBlob: {
                path: "/disperser.Disperser/RetrieveBlob",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: RetrieveBlobRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => RetrieveBlobRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: RetrieveBlobReply) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => RetrieveBlobReply.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract DisperseBlob(call: grpc_1.ServerUnaryCall<DisperseBlobRequest, DisperseBlobReply>, callback: grpc_1.sendUnaryData<DisperseBlobReply>): void;
        abstract DisperseBlobAuthenticated(call: grpc_1.ServerDuplexStream<AuthenticatedRequest, AuthenticatedReply>): void;
        abstract GetBlobStatus(call: grpc_1.ServerUnaryCall<BlobStatusRequest, BlobStatusReply>, callback: grpc_1.sendUnaryData<BlobStatusReply>): void;
        abstract RetrieveBlob(call: grpc_1.ServerUnaryCall<RetrieveBlobRequest, RetrieveBlobReply>, callback: grpc_1.sendUnaryData<RetrieveBlobReply>): void;
    }
    export class DisperserClient extends grpc_1.makeGenericClientConstructor(UnimplementedDisperserService.definition, "Disperser", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        DisperseBlob: GrpcUnaryServiceInterface<DisperseBlobRequest, DisperseBlobReply> = (message: DisperseBlobRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<DisperseBlobReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<DisperseBlobReply>, callback?: grpc_1.requestCallback<DisperseBlobReply>): grpc_1.ClientUnaryCall => {
            return super.DisperseBlob(message, metadata, options, callback);
        };
        DisperseBlobAuthenticated: GrpcChunkServiceInterface<AuthenticatedRequest, AuthenticatedReply> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<AuthenticatedRequest, AuthenticatedReply> => {
            return super.DisperseBlobAuthenticated(metadata, options);
        };
        GetBlobStatus: GrpcUnaryServiceInterface<BlobStatusRequest, BlobStatusReply> = (message: BlobStatusRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<BlobStatusReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<BlobStatusReply>, callback?: grpc_1.requestCallback<BlobStatusReply>): grpc_1.ClientUnaryCall => {
            return super.GetBlobStatus(message, metadata, options, callback);
        };
        RetrieveBlob: GrpcUnaryServiceInterface<RetrieveBlobRequest, RetrieveBlobReply> = (message: RetrieveBlobRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<RetrieveBlobReply>, options?: grpc_1.CallOptions | grpc_1.requestCallback<RetrieveBlobReply>, callback?: grpc_1.requestCallback<RetrieveBlobReply>): grpc_1.ClientUnaryCall => {
            return super.RetrieveBlob(message, metadata, options, callback);
        };
    }
}
